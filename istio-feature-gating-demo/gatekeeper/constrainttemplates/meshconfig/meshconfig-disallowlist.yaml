apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: Enforce that MeshConfig and ProxyConfig values are ones that aren't in the disallowlist. 
  name: meshconfigdisallow
spec:
  crd:
    spec:
      names:
        kind: MeshConfigDisallow
      validation:
        openAPIV3Schema:
          type: object
          properties:
            meshConfigDisallowList:
              description: Disallowed MeshConfig values
              items:
                type: string
              type: array
  targets:
  - target: admission.k8s.gatekeeper.sh
    # This sets a string disallowlist - the constraint template policy will parse the Istio ConfigMap (MeshConfig) and ensure that no fields are from the disallowlist.
    # However, these validations should ideally be part of a separate, Go-based admission controller webhook for a more reliable and fine-grained parsing of the MeshConfig (and ProxyConfig). 
    # See https://pkg.go.dev/istio.io/api/mesh/v1alpha1#MeshConfig and https://github.com/istio/istio/blob/1.19.3/pkg/config/mesh/mesh.go#L188 for examples.
    # All MeshConfig and ProxyConfig fields: https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1. 
    rego: |
      package istio.guardrails.disallowedmeshconfigvalues

      import future.keywords

      violation[{"msg": msg}] {
        cm := input.review.object
        cm.metadata.name == "istio" # Will need to change this if setting Istio revision to non-default value.
        disallowList := input.parameters.meshConfigDisallowList
        meshConfigField := split(cm.data.mesh, "\n")[_]
        meshConfigField in disallowList
        msg := sprintf("MeshConfig field %v is disallowed - disallowed values are %v.", [meshConfigField, disallowList])
      }
