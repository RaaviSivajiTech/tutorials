trigger:
  branches:
    include:
    - main
    - release-v*

pr:
  branches:
    include:
    - main
    - release-v*

variables:
  KUBECONFIG: $(System.DefaultWorkingDirectory)/kubeconfig.json
  # Or set these as UI Variables?
  client.image.name: client
  client.image.tag: test
  server.image.name: server
  server.image.tag: test

stages:
- stage: build
  pool:
    vmImage: ubuntu-latest # Default agent pool for Azure Pipelines
  jobs:
    - job: build_docker_images
      steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce' # string. Required. Docker Version. Default: 17.09.0-ce.
      - template: ./templates/install-kind.yaml
        parameters:
          kind_version: 0.17.0
      - bash: docker version
        displayName: Ensure docker installation succeeded
      - bash: docker login -u $(docker.registry) -p "$DOCKER_PASSWORD"
        displayName: Login to docker registry
        env:
          DOCKER_PASSWORD: $(docker.password)
      - bash: |
          echo "##vso[task.setvariable variable=IMAGE_TAG]$(git rev-parse --short HEAD)"
          echo $IMAGE_TAG
        displayName: Set IMAGE_TAG based on git commit
      - template: ./templates/build-and-push-image.yaml
        parameters:
          image_registry: $(docker.username)
          image_name: $(client.image.name)
          image_tag: $(client.image.tag)
          dockerfile_path: ./ado-pipeline-go-microservice-app/client
      - template: ./templates/build-and-push-image.yaml
        parameters:
          image_registry: $(docker.username)
          image_name: $(server.image.name)
          image_tag: $(server.image.tag)
          dockerfile_path: ./ado-pipeline-go-microservice-app/server
      - template: ./templates/create-kind-cluster.yaml
        parameters:
          cluster_name: kind-test

- stage: test
  pool:
    vmImage: ubuntu-latest # Default agent pool for Azure Pipelines
  jobs:
    - job: test_microservice_app
      steps:
      - template: ./templates/create-kind-cluster.yaml
        parameters:
          cluster_name: kind-test
      - bash: kubectl get pods -A
        displayName: Get pods
      - bash: |
          kubectl create ns client
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: client
            namespace: client
            labels:
              app: client
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: client
            template:
              metadata:
                labels:
                  app: client
              spec:
                containers:
                - name: client
                  image: $registry/$client_image_name:$client_image_tag
                  imagePullPolicy: Always
                  command: ["/client"]
          EOF
        displayName: Create client deployment
        env:
          client_image_name: $(client.image.name)
          client_image_tag: $(client.image.tag)
          registry: $(docker.registry)
      - template: ./templates/wait-for-deployment.yaml
        parameters:
          max_duration_seconds: 300
          interval_seconds: 10
          deployment_name: client
          deployment_namespace: client
      - bash: |
          kubectl create ns server
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: server
            namespace: server
            labels:
              app: server
          spec:
            ports:
            - port: 8080
              name: server-port
            selector:
              app: server
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: server
            namespace: server
            labels:
              app: server
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: server
            template:
              metadata:
                labels:
                  app: server
              spec:
                containers:
                - name: server
                  image: $registry/$server_image_name:$server_image_tag
                  imagePullPolicy: Always
                  command: ["/server"]
          EOF
        displayName: Create server deployment
        env:
          server_image_name: $(server.image.name)
          server_image_tag: $(server.image.tag)
          registry: $(docker.registry)
      - template: ./templates/wait-for-deployment.yaml
        parameters:
          max_duration_seconds: 300
          interval_seconds: 10
          deployment_name: server
          deployment_namespace: server
      - bash: kubectl get pods -A
        displayName: Get pods

## Publish stage that only gets enabled / triggered for release job? 

# Push to staging registry (or as test tag) before publishing to official registry?
# Or distinguish between CI and release Pipeline? 
